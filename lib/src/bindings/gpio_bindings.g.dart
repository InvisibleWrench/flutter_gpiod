part of bindings;
// ignore_for_file: non_constant_identifier_names, camel_case_types, unnecessary_brace_in_string_interps, unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// struct gpiochip_info - Information about a certain GPIO chip
/// @name: the Linux kernel name of this GPIO chip
/// @label: a functional name for this GPIO chip, such as a product
/// number, may be NULL
/// @lines: number of GPIO lines on this chip
class gpiochip_info extends ffi.Struct {
  @ffi.Int8()
  int _unique_name_item_0;
  @ffi.Int8()
  int _unique_name_item_1;
  @ffi.Int8()
  int _unique_name_item_2;
  @ffi.Int8()
  int _unique_name_item_3;
  @ffi.Int8()
  int _unique_name_item_4;
  @ffi.Int8()
  int _unique_name_item_5;
  @ffi.Int8()
  int _unique_name_item_6;
  @ffi.Int8()
  int _unique_name_item_7;
  @ffi.Int8()
  int _unique_name_item_8;
  @ffi.Int8()
  int _unique_name_item_9;
  @ffi.Int8()
  int _unique_name_item_10;
  @ffi.Int8()
  int _unique_name_item_11;
  @ffi.Int8()
  int _unique_name_item_12;
  @ffi.Int8()
  int _unique_name_item_13;
  @ffi.Int8()
  int _unique_name_item_14;
  @ffi.Int8()
  int _unique_name_item_15;
  @ffi.Int8()
  int _unique_name_item_16;
  @ffi.Int8()
  int _unique_name_item_17;
  @ffi.Int8()
  int _unique_name_item_18;
  @ffi.Int8()
  int _unique_name_item_19;
  @ffi.Int8()
  int _unique_name_item_20;
  @ffi.Int8()
  int _unique_name_item_21;
  @ffi.Int8()
  int _unique_name_item_22;
  @ffi.Int8()
  int _unique_name_item_23;
  @ffi.Int8()
  int _unique_name_item_24;
  @ffi.Int8()
  int _unique_name_item_25;
  @ffi.Int8()
  int _unique_name_item_26;
  @ffi.Int8()
  int _unique_name_item_27;
  @ffi.Int8()
  int _unique_name_item_28;
  @ffi.Int8()
  int _unique_name_item_29;
  @ffi.Int8()
  int _unique_name_item_30;
  @ffi.Int8()
  int _unique_name_item_31;

  /// Helper for array `name`.
  ArrayHelper_gpiochip_info_name_level0 get name =>
      ArrayHelper_gpiochip_info_name_level0(this, [32], 0, 0);
  @ffi.Int8()
  int _unique_label_item_0;
  @ffi.Int8()
  int _unique_label_item_1;
  @ffi.Int8()
  int _unique_label_item_2;
  @ffi.Int8()
  int _unique_label_item_3;
  @ffi.Int8()
  int _unique_label_item_4;
  @ffi.Int8()
  int _unique_label_item_5;
  @ffi.Int8()
  int _unique_label_item_6;
  @ffi.Int8()
  int _unique_label_item_7;
  @ffi.Int8()
  int _unique_label_item_8;
  @ffi.Int8()
  int _unique_label_item_9;
  @ffi.Int8()
  int _unique_label_item_10;
  @ffi.Int8()
  int _unique_label_item_11;
  @ffi.Int8()
  int _unique_label_item_12;
  @ffi.Int8()
  int _unique_label_item_13;
  @ffi.Int8()
  int _unique_label_item_14;
  @ffi.Int8()
  int _unique_label_item_15;
  @ffi.Int8()
  int _unique_label_item_16;
  @ffi.Int8()
  int _unique_label_item_17;
  @ffi.Int8()
  int _unique_label_item_18;
  @ffi.Int8()
  int _unique_label_item_19;
  @ffi.Int8()
  int _unique_label_item_20;
  @ffi.Int8()
  int _unique_label_item_21;
  @ffi.Int8()
  int _unique_label_item_22;
  @ffi.Int8()
  int _unique_label_item_23;
  @ffi.Int8()
  int _unique_label_item_24;
  @ffi.Int8()
  int _unique_label_item_25;
  @ffi.Int8()
  int _unique_label_item_26;
  @ffi.Int8()
  int _unique_label_item_27;
  @ffi.Int8()
  int _unique_label_item_28;
  @ffi.Int8()
  int _unique_label_item_29;
  @ffi.Int8()
  int _unique_label_item_30;
  @ffi.Int8()
  int _unique_label_item_31;

  /// Helper for array `label`.
  ArrayHelper_gpiochip_info_label_level0 get label =>
      ArrayHelper_gpiochip_info_label_level0(this, [32], 0, 0);
  @ffi.Uint32()
  int lines;
}

/// Helper for array `name` in struct `gpiochip_info`.
class ArrayHelper_gpiochip_info_name_level0 {
  final gpiochip_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiochip_info_name_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_name_item_0;
      case 1:
        return _struct._unique_name_item_1;
      case 2:
        return _struct._unique_name_item_2;
      case 3:
        return _struct._unique_name_item_3;
      case 4:
        return _struct._unique_name_item_4;
      case 5:
        return _struct._unique_name_item_5;
      case 6:
        return _struct._unique_name_item_6;
      case 7:
        return _struct._unique_name_item_7;
      case 8:
        return _struct._unique_name_item_8;
      case 9:
        return _struct._unique_name_item_9;
      case 10:
        return _struct._unique_name_item_10;
      case 11:
        return _struct._unique_name_item_11;
      case 12:
        return _struct._unique_name_item_12;
      case 13:
        return _struct._unique_name_item_13;
      case 14:
        return _struct._unique_name_item_14;
      case 15:
        return _struct._unique_name_item_15;
      case 16:
        return _struct._unique_name_item_16;
      case 17:
        return _struct._unique_name_item_17;
      case 18:
        return _struct._unique_name_item_18;
      case 19:
        return _struct._unique_name_item_19;
      case 20:
        return _struct._unique_name_item_20;
      case 21:
        return _struct._unique_name_item_21;
      case 22:
        return _struct._unique_name_item_22;
      case 23:
        return _struct._unique_name_item_23;
      case 24:
        return _struct._unique_name_item_24;
      case 25:
        return _struct._unique_name_item_25;
      case 26:
        return _struct._unique_name_item_26;
      case 27:
        return _struct._unique_name_item_27;
      case 28:
        return _struct._unique_name_item_28;
      case 29:
        return _struct._unique_name_item_29;
      case 30:
        return _struct._unique_name_item_30;
      case 31:
        return _struct._unique_name_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_name_item_0 = value;
        break;
      case 1:
        _struct._unique_name_item_1 = value;
        break;
      case 2:
        _struct._unique_name_item_2 = value;
        break;
      case 3:
        _struct._unique_name_item_3 = value;
        break;
      case 4:
        _struct._unique_name_item_4 = value;
        break;
      case 5:
        _struct._unique_name_item_5 = value;
        break;
      case 6:
        _struct._unique_name_item_6 = value;
        break;
      case 7:
        _struct._unique_name_item_7 = value;
        break;
      case 8:
        _struct._unique_name_item_8 = value;
        break;
      case 9:
        _struct._unique_name_item_9 = value;
        break;
      case 10:
        _struct._unique_name_item_10 = value;
        break;
      case 11:
        _struct._unique_name_item_11 = value;
        break;
      case 12:
        _struct._unique_name_item_12 = value;
        break;
      case 13:
        _struct._unique_name_item_13 = value;
        break;
      case 14:
        _struct._unique_name_item_14 = value;
        break;
      case 15:
        _struct._unique_name_item_15 = value;
        break;
      case 16:
        _struct._unique_name_item_16 = value;
        break;
      case 17:
        _struct._unique_name_item_17 = value;
        break;
      case 18:
        _struct._unique_name_item_18 = value;
        break;
      case 19:
        _struct._unique_name_item_19 = value;
        break;
      case 20:
        _struct._unique_name_item_20 = value;
        break;
      case 21:
        _struct._unique_name_item_21 = value;
        break;
      case 22:
        _struct._unique_name_item_22 = value;
        break;
      case 23:
        _struct._unique_name_item_23 = value;
        break;
      case 24:
        _struct._unique_name_item_24 = value;
        break;
      case 25:
        _struct._unique_name_item_25 = value;
        break;
      case 26:
        _struct._unique_name_item_26 = value;
        break;
      case 27:
        _struct._unique_name_item_27 = value;
        break;
      case 28:
        _struct._unique_name_item_28 = value;
        break;
      case 29:
        _struct._unique_name_item_29 = value;
        break;
      case 30:
        _struct._unique_name_item_30 = value;
        break;
      case 31:
        _struct._unique_name_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `label` in struct `gpiochip_info`.
class ArrayHelper_gpiochip_info_label_level0 {
  final gpiochip_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiochip_info_label_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_label_item_0;
      case 1:
        return _struct._unique_label_item_1;
      case 2:
        return _struct._unique_label_item_2;
      case 3:
        return _struct._unique_label_item_3;
      case 4:
        return _struct._unique_label_item_4;
      case 5:
        return _struct._unique_label_item_5;
      case 6:
        return _struct._unique_label_item_6;
      case 7:
        return _struct._unique_label_item_7;
      case 8:
        return _struct._unique_label_item_8;
      case 9:
        return _struct._unique_label_item_9;
      case 10:
        return _struct._unique_label_item_10;
      case 11:
        return _struct._unique_label_item_11;
      case 12:
        return _struct._unique_label_item_12;
      case 13:
        return _struct._unique_label_item_13;
      case 14:
        return _struct._unique_label_item_14;
      case 15:
        return _struct._unique_label_item_15;
      case 16:
        return _struct._unique_label_item_16;
      case 17:
        return _struct._unique_label_item_17;
      case 18:
        return _struct._unique_label_item_18;
      case 19:
        return _struct._unique_label_item_19;
      case 20:
        return _struct._unique_label_item_20;
      case 21:
        return _struct._unique_label_item_21;
      case 22:
        return _struct._unique_label_item_22;
      case 23:
        return _struct._unique_label_item_23;
      case 24:
        return _struct._unique_label_item_24;
      case 25:
        return _struct._unique_label_item_25;
      case 26:
        return _struct._unique_label_item_26;
      case 27:
        return _struct._unique_label_item_27;
      case 28:
        return _struct._unique_label_item_28;
      case 29:
        return _struct._unique_label_item_29;
      case 30:
        return _struct._unique_label_item_30;
      case 31:
        return _struct._unique_label_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_label_item_0 = value;
        break;
      case 1:
        _struct._unique_label_item_1 = value;
        break;
      case 2:
        _struct._unique_label_item_2 = value;
        break;
      case 3:
        _struct._unique_label_item_3 = value;
        break;
      case 4:
        _struct._unique_label_item_4 = value;
        break;
      case 5:
        _struct._unique_label_item_5 = value;
        break;
      case 6:
        _struct._unique_label_item_6 = value;
        break;
      case 7:
        _struct._unique_label_item_7 = value;
        break;
      case 8:
        _struct._unique_label_item_8 = value;
        break;
      case 9:
        _struct._unique_label_item_9 = value;
        break;
      case 10:
        _struct._unique_label_item_10 = value;
        break;
      case 11:
        _struct._unique_label_item_11 = value;
        break;
      case 12:
        _struct._unique_label_item_12 = value;
        break;
      case 13:
        _struct._unique_label_item_13 = value;
        break;
      case 14:
        _struct._unique_label_item_14 = value;
        break;
      case 15:
        _struct._unique_label_item_15 = value;
        break;
      case 16:
        _struct._unique_label_item_16 = value;
        break;
      case 17:
        _struct._unique_label_item_17 = value;
        break;
      case 18:
        _struct._unique_label_item_18 = value;
        break;
      case 19:
        _struct._unique_label_item_19 = value;
        break;
      case 20:
        _struct._unique_label_item_20 = value;
        break;
      case 21:
        _struct._unique_label_item_21 = value;
        break;
      case 22:
        _struct._unique_label_item_22 = value;
        break;
      case 23:
        _struct._unique_label_item_23 = value;
        break;
      case 24:
        _struct._unique_label_item_24 = value;
        break;
      case 25:
        _struct._unique_label_item_25 = value;
        break;
      case 26:
        _struct._unique_label_item_26 = value;
        break;
      case 27:
        _struct._unique_label_item_27 = value;
        break;
      case 28:
        _struct._unique_label_item_28 = value;
        break;
      case 29:
        _struct._unique_label_item_29 = value;
        break;
      case 30:
        _struct._unique_label_item_30 = value;
        break;
      case 31:
        _struct._unique_label_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioline_info - Information about a certain GPIO line
/// @line_offset: the local offset on this GPIO device, fill this in when
/// requesting the line information from the kernel
/// @flags: various flags for this line
/// @name: the name of this GPIO line, such as the output pin of the line on the
/// chip, a rail or a pin header name on a board, as specified by the gpio
/// chip, may be NULL
/// @consumer: a functional name for the consumer of this GPIO line as set by
/// whatever is using it, will be NULL if there is no current user but may
/// also be NULL if the consumer doesn't set this up
class gpioline_info extends ffi.Struct {
  @ffi.Uint32()
  int line_offset;

  @ffi.Uint32()
  int flags;

  @ffi.Int8()
  int _unique_name_item_0;
  @ffi.Int8()
  int _unique_name_item_1;
  @ffi.Int8()
  int _unique_name_item_2;
  @ffi.Int8()
  int _unique_name_item_3;
  @ffi.Int8()
  int _unique_name_item_4;
  @ffi.Int8()
  int _unique_name_item_5;
  @ffi.Int8()
  int _unique_name_item_6;
  @ffi.Int8()
  int _unique_name_item_7;
  @ffi.Int8()
  int _unique_name_item_8;
  @ffi.Int8()
  int _unique_name_item_9;
  @ffi.Int8()
  int _unique_name_item_10;
  @ffi.Int8()
  int _unique_name_item_11;
  @ffi.Int8()
  int _unique_name_item_12;
  @ffi.Int8()
  int _unique_name_item_13;
  @ffi.Int8()
  int _unique_name_item_14;
  @ffi.Int8()
  int _unique_name_item_15;
  @ffi.Int8()
  int _unique_name_item_16;
  @ffi.Int8()
  int _unique_name_item_17;
  @ffi.Int8()
  int _unique_name_item_18;
  @ffi.Int8()
  int _unique_name_item_19;
  @ffi.Int8()
  int _unique_name_item_20;
  @ffi.Int8()
  int _unique_name_item_21;
  @ffi.Int8()
  int _unique_name_item_22;
  @ffi.Int8()
  int _unique_name_item_23;
  @ffi.Int8()
  int _unique_name_item_24;
  @ffi.Int8()
  int _unique_name_item_25;
  @ffi.Int8()
  int _unique_name_item_26;
  @ffi.Int8()
  int _unique_name_item_27;
  @ffi.Int8()
  int _unique_name_item_28;
  @ffi.Int8()
  int _unique_name_item_29;
  @ffi.Int8()
  int _unique_name_item_30;
  @ffi.Int8()
  int _unique_name_item_31;

  /// Helper for array `name`.
  ArrayHelper_gpioline_info_name_level0 get name =>
      ArrayHelper_gpioline_info_name_level0(this, [32], 0, 0);
  @ffi.Int8()
  int _unique_consumer_item_0;
  @ffi.Int8()
  int _unique_consumer_item_1;
  @ffi.Int8()
  int _unique_consumer_item_2;
  @ffi.Int8()
  int _unique_consumer_item_3;
  @ffi.Int8()
  int _unique_consumer_item_4;
  @ffi.Int8()
  int _unique_consumer_item_5;
  @ffi.Int8()
  int _unique_consumer_item_6;
  @ffi.Int8()
  int _unique_consumer_item_7;
  @ffi.Int8()
  int _unique_consumer_item_8;
  @ffi.Int8()
  int _unique_consumer_item_9;
  @ffi.Int8()
  int _unique_consumer_item_10;
  @ffi.Int8()
  int _unique_consumer_item_11;
  @ffi.Int8()
  int _unique_consumer_item_12;
  @ffi.Int8()
  int _unique_consumer_item_13;
  @ffi.Int8()
  int _unique_consumer_item_14;
  @ffi.Int8()
  int _unique_consumer_item_15;
  @ffi.Int8()
  int _unique_consumer_item_16;
  @ffi.Int8()
  int _unique_consumer_item_17;
  @ffi.Int8()
  int _unique_consumer_item_18;
  @ffi.Int8()
  int _unique_consumer_item_19;
  @ffi.Int8()
  int _unique_consumer_item_20;
  @ffi.Int8()
  int _unique_consumer_item_21;
  @ffi.Int8()
  int _unique_consumer_item_22;
  @ffi.Int8()
  int _unique_consumer_item_23;
  @ffi.Int8()
  int _unique_consumer_item_24;
  @ffi.Int8()
  int _unique_consumer_item_25;
  @ffi.Int8()
  int _unique_consumer_item_26;
  @ffi.Int8()
  int _unique_consumer_item_27;
  @ffi.Int8()
  int _unique_consumer_item_28;
  @ffi.Int8()
  int _unique_consumer_item_29;
  @ffi.Int8()
  int _unique_consumer_item_30;
  @ffi.Int8()
  int _unique_consumer_item_31;

  /// Helper for array `consumer`.
  ArrayHelper_gpioline_info_consumer_level0 get consumer =>
      ArrayHelper_gpioline_info_consumer_level0(this, [32], 0, 0);
}

/// Helper for array `name` in struct `gpioline_info`.
class ArrayHelper_gpioline_info_name_level0 {
  final gpioline_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioline_info_name_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_name_item_0;
      case 1:
        return _struct._unique_name_item_1;
      case 2:
        return _struct._unique_name_item_2;
      case 3:
        return _struct._unique_name_item_3;
      case 4:
        return _struct._unique_name_item_4;
      case 5:
        return _struct._unique_name_item_5;
      case 6:
        return _struct._unique_name_item_6;
      case 7:
        return _struct._unique_name_item_7;
      case 8:
        return _struct._unique_name_item_8;
      case 9:
        return _struct._unique_name_item_9;
      case 10:
        return _struct._unique_name_item_10;
      case 11:
        return _struct._unique_name_item_11;
      case 12:
        return _struct._unique_name_item_12;
      case 13:
        return _struct._unique_name_item_13;
      case 14:
        return _struct._unique_name_item_14;
      case 15:
        return _struct._unique_name_item_15;
      case 16:
        return _struct._unique_name_item_16;
      case 17:
        return _struct._unique_name_item_17;
      case 18:
        return _struct._unique_name_item_18;
      case 19:
        return _struct._unique_name_item_19;
      case 20:
        return _struct._unique_name_item_20;
      case 21:
        return _struct._unique_name_item_21;
      case 22:
        return _struct._unique_name_item_22;
      case 23:
        return _struct._unique_name_item_23;
      case 24:
        return _struct._unique_name_item_24;
      case 25:
        return _struct._unique_name_item_25;
      case 26:
        return _struct._unique_name_item_26;
      case 27:
        return _struct._unique_name_item_27;
      case 28:
        return _struct._unique_name_item_28;
      case 29:
        return _struct._unique_name_item_29;
      case 30:
        return _struct._unique_name_item_30;
      case 31:
        return _struct._unique_name_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_name_item_0 = value;
        break;
      case 1:
        _struct._unique_name_item_1 = value;
        break;
      case 2:
        _struct._unique_name_item_2 = value;
        break;
      case 3:
        _struct._unique_name_item_3 = value;
        break;
      case 4:
        _struct._unique_name_item_4 = value;
        break;
      case 5:
        _struct._unique_name_item_5 = value;
        break;
      case 6:
        _struct._unique_name_item_6 = value;
        break;
      case 7:
        _struct._unique_name_item_7 = value;
        break;
      case 8:
        _struct._unique_name_item_8 = value;
        break;
      case 9:
        _struct._unique_name_item_9 = value;
        break;
      case 10:
        _struct._unique_name_item_10 = value;
        break;
      case 11:
        _struct._unique_name_item_11 = value;
        break;
      case 12:
        _struct._unique_name_item_12 = value;
        break;
      case 13:
        _struct._unique_name_item_13 = value;
        break;
      case 14:
        _struct._unique_name_item_14 = value;
        break;
      case 15:
        _struct._unique_name_item_15 = value;
        break;
      case 16:
        _struct._unique_name_item_16 = value;
        break;
      case 17:
        _struct._unique_name_item_17 = value;
        break;
      case 18:
        _struct._unique_name_item_18 = value;
        break;
      case 19:
        _struct._unique_name_item_19 = value;
        break;
      case 20:
        _struct._unique_name_item_20 = value;
        break;
      case 21:
        _struct._unique_name_item_21 = value;
        break;
      case 22:
        _struct._unique_name_item_22 = value;
        break;
      case 23:
        _struct._unique_name_item_23 = value;
        break;
      case 24:
        _struct._unique_name_item_24 = value;
        break;
      case 25:
        _struct._unique_name_item_25 = value;
        break;
      case 26:
        _struct._unique_name_item_26 = value;
        break;
      case 27:
        _struct._unique_name_item_27 = value;
        break;
      case 28:
        _struct._unique_name_item_28 = value;
        break;
      case 29:
        _struct._unique_name_item_29 = value;
        break;
      case 30:
        _struct._unique_name_item_30 = value;
        break;
      case 31:
        _struct._unique_name_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `consumer` in struct `gpioline_info`.
class ArrayHelper_gpioline_info_consumer_level0 {
  final gpioline_info _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioline_info_consumer_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_item_0;
      case 1:
        return _struct._unique_consumer_item_1;
      case 2:
        return _struct._unique_consumer_item_2;
      case 3:
        return _struct._unique_consumer_item_3;
      case 4:
        return _struct._unique_consumer_item_4;
      case 5:
        return _struct._unique_consumer_item_5;
      case 6:
        return _struct._unique_consumer_item_6;
      case 7:
        return _struct._unique_consumer_item_7;
      case 8:
        return _struct._unique_consumer_item_8;
      case 9:
        return _struct._unique_consumer_item_9;
      case 10:
        return _struct._unique_consumer_item_10;
      case 11:
        return _struct._unique_consumer_item_11;
      case 12:
        return _struct._unique_consumer_item_12;
      case 13:
        return _struct._unique_consumer_item_13;
      case 14:
        return _struct._unique_consumer_item_14;
      case 15:
        return _struct._unique_consumer_item_15;
      case 16:
        return _struct._unique_consumer_item_16;
      case 17:
        return _struct._unique_consumer_item_17;
      case 18:
        return _struct._unique_consumer_item_18;
      case 19:
        return _struct._unique_consumer_item_19;
      case 20:
        return _struct._unique_consumer_item_20;
      case 21:
        return _struct._unique_consumer_item_21;
      case 22:
        return _struct._unique_consumer_item_22;
      case 23:
        return _struct._unique_consumer_item_23;
      case 24:
        return _struct._unique_consumer_item_24;
      case 25:
        return _struct._unique_consumer_item_25;
      case 26:
        return _struct._unique_consumer_item_26;
      case 27:
        return _struct._unique_consumer_item_27;
      case 28:
        return _struct._unique_consumer_item_28;
      case 29:
        return _struct._unique_consumer_item_29;
      case 30:
        return _struct._unique_consumer_item_30;
      case 31:
        return _struct._unique_consumer_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiohandle_request - Information about a GPIO handle request
/// @lineoffsets: an array of desired lines, specified by offset index for the
/// associated GPIO device
/// @flags: desired flags for the desired GPIO lines, such as
/// GPIOHANDLE_REQUEST_OUTPUT, GPIOHANDLE_REQUEST_ACTIVE_LOW etc, OR:ed
/// together. Note that even if multiple lines are requested, the same flags
/// must be applicable to all of them, if you want lines with individual
/// flags set, request them one by one. It is possible to select
/// a batch of input or output lines, but they must all have the same
/// characteristics, i.e. all inputs or all outputs, all active low etc
/// @default_values: if the GPIOHANDLE_REQUEST_OUTPUT is set for a requested
/// line, this specifies the default output value, should be 0 (low) or
/// 1 (high), anything else than 0 or 1 will be interpreted as 1 (high)
/// @consumer_label: a desired consumer label for the selected GPIO line(s)
/// such as "my-bitbanged-relay"
/// @lines: number of lines requested in this request, i.e. the number of
/// valid fields in the above arrays, set to 1 to request a single line
/// @fd: if successful this field will contain a valid anonymous file handle
/// after a GPIO_GET_LINEHANDLE_IOCTL operation, zero or negative value
/// means error
class gpiohandle_request extends ffi.Struct {
  @ffi.Uint32()
  int _unique_lineoffsets_item_0;
  @ffi.Uint32()
  int _unique_lineoffsets_item_1;
  @ffi.Uint32()
  int _unique_lineoffsets_item_2;
  @ffi.Uint32()
  int _unique_lineoffsets_item_3;
  @ffi.Uint32()
  int _unique_lineoffsets_item_4;
  @ffi.Uint32()
  int _unique_lineoffsets_item_5;
  @ffi.Uint32()
  int _unique_lineoffsets_item_6;
  @ffi.Uint32()
  int _unique_lineoffsets_item_7;
  @ffi.Uint32()
  int _unique_lineoffsets_item_8;
  @ffi.Uint32()
  int _unique_lineoffsets_item_9;
  @ffi.Uint32()
  int _unique_lineoffsets_item_10;
  @ffi.Uint32()
  int _unique_lineoffsets_item_11;
  @ffi.Uint32()
  int _unique_lineoffsets_item_12;
  @ffi.Uint32()
  int _unique_lineoffsets_item_13;
  @ffi.Uint32()
  int _unique_lineoffsets_item_14;
  @ffi.Uint32()
  int _unique_lineoffsets_item_15;
  @ffi.Uint32()
  int _unique_lineoffsets_item_16;
  @ffi.Uint32()
  int _unique_lineoffsets_item_17;
  @ffi.Uint32()
  int _unique_lineoffsets_item_18;
  @ffi.Uint32()
  int _unique_lineoffsets_item_19;
  @ffi.Uint32()
  int _unique_lineoffsets_item_20;
  @ffi.Uint32()
  int _unique_lineoffsets_item_21;
  @ffi.Uint32()
  int _unique_lineoffsets_item_22;
  @ffi.Uint32()
  int _unique_lineoffsets_item_23;
  @ffi.Uint32()
  int _unique_lineoffsets_item_24;
  @ffi.Uint32()
  int _unique_lineoffsets_item_25;
  @ffi.Uint32()
  int _unique_lineoffsets_item_26;
  @ffi.Uint32()
  int _unique_lineoffsets_item_27;
  @ffi.Uint32()
  int _unique_lineoffsets_item_28;
  @ffi.Uint32()
  int _unique_lineoffsets_item_29;
  @ffi.Uint32()
  int _unique_lineoffsets_item_30;
  @ffi.Uint32()
  int _unique_lineoffsets_item_31;
  @ffi.Uint32()
  int _unique_lineoffsets_item_32;
  @ffi.Uint32()
  int _unique_lineoffsets_item_33;
  @ffi.Uint32()
  int _unique_lineoffsets_item_34;
  @ffi.Uint32()
  int _unique_lineoffsets_item_35;
  @ffi.Uint32()
  int _unique_lineoffsets_item_36;
  @ffi.Uint32()
  int _unique_lineoffsets_item_37;
  @ffi.Uint32()
  int _unique_lineoffsets_item_38;
  @ffi.Uint32()
  int _unique_lineoffsets_item_39;
  @ffi.Uint32()
  int _unique_lineoffsets_item_40;
  @ffi.Uint32()
  int _unique_lineoffsets_item_41;
  @ffi.Uint32()
  int _unique_lineoffsets_item_42;
  @ffi.Uint32()
  int _unique_lineoffsets_item_43;
  @ffi.Uint32()
  int _unique_lineoffsets_item_44;
  @ffi.Uint32()
  int _unique_lineoffsets_item_45;
  @ffi.Uint32()
  int _unique_lineoffsets_item_46;
  @ffi.Uint32()
  int _unique_lineoffsets_item_47;
  @ffi.Uint32()
  int _unique_lineoffsets_item_48;
  @ffi.Uint32()
  int _unique_lineoffsets_item_49;
  @ffi.Uint32()
  int _unique_lineoffsets_item_50;
  @ffi.Uint32()
  int _unique_lineoffsets_item_51;
  @ffi.Uint32()
  int _unique_lineoffsets_item_52;
  @ffi.Uint32()
  int _unique_lineoffsets_item_53;
  @ffi.Uint32()
  int _unique_lineoffsets_item_54;
  @ffi.Uint32()
  int _unique_lineoffsets_item_55;
  @ffi.Uint32()
  int _unique_lineoffsets_item_56;
  @ffi.Uint32()
  int _unique_lineoffsets_item_57;
  @ffi.Uint32()
  int _unique_lineoffsets_item_58;
  @ffi.Uint32()
  int _unique_lineoffsets_item_59;
  @ffi.Uint32()
  int _unique_lineoffsets_item_60;
  @ffi.Uint32()
  int _unique_lineoffsets_item_61;
  @ffi.Uint32()
  int _unique_lineoffsets_item_62;
  @ffi.Uint32()
  int _unique_lineoffsets_item_63;

  /// Helper for array `lineoffsets`.
  ArrayHelper_gpiohandle_request_lineoffsets_level0 get lineoffsets =>
      ArrayHelper_gpiohandle_request_lineoffsets_level0(this, [64], 0, 0);
  @ffi.Uint32()
  int flags;

  @ffi.Uint8()
  int _unique_default_values_item_0;
  @ffi.Uint8()
  int _unique_default_values_item_1;
  @ffi.Uint8()
  int _unique_default_values_item_2;
  @ffi.Uint8()
  int _unique_default_values_item_3;
  @ffi.Uint8()
  int _unique_default_values_item_4;
  @ffi.Uint8()
  int _unique_default_values_item_5;
  @ffi.Uint8()
  int _unique_default_values_item_6;
  @ffi.Uint8()
  int _unique_default_values_item_7;
  @ffi.Uint8()
  int _unique_default_values_item_8;
  @ffi.Uint8()
  int _unique_default_values_item_9;
  @ffi.Uint8()
  int _unique_default_values_item_10;
  @ffi.Uint8()
  int _unique_default_values_item_11;
  @ffi.Uint8()
  int _unique_default_values_item_12;
  @ffi.Uint8()
  int _unique_default_values_item_13;
  @ffi.Uint8()
  int _unique_default_values_item_14;
  @ffi.Uint8()
  int _unique_default_values_item_15;
  @ffi.Uint8()
  int _unique_default_values_item_16;
  @ffi.Uint8()
  int _unique_default_values_item_17;
  @ffi.Uint8()
  int _unique_default_values_item_18;
  @ffi.Uint8()
  int _unique_default_values_item_19;
  @ffi.Uint8()
  int _unique_default_values_item_20;
  @ffi.Uint8()
  int _unique_default_values_item_21;
  @ffi.Uint8()
  int _unique_default_values_item_22;
  @ffi.Uint8()
  int _unique_default_values_item_23;
  @ffi.Uint8()
  int _unique_default_values_item_24;
  @ffi.Uint8()
  int _unique_default_values_item_25;
  @ffi.Uint8()
  int _unique_default_values_item_26;
  @ffi.Uint8()
  int _unique_default_values_item_27;
  @ffi.Uint8()
  int _unique_default_values_item_28;
  @ffi.Uint8()
  int _unique_default_values_item_29;
  @ffi.Uint8()
  int _unique_default_values_item_30;
  @ffi.Uint8()
  int _unique_default_values_item_31;
  @ffi.Uint8()
  int _unique_default_values_item_32;
  @ffi.Uint8()
  int _unique_default_values_item_33;
  @ffi.Uint8()
  int _unique_default_values_item_34;
  @ffi.Uint8()
  int _unique_default_values_item_35;
  @ffi.Uint8()
  int _unique_default_values_item_36;
  @ffi.Uint8()
  int _unique_default_values_item_37;
  @ffi.Uint8()
  int _unique_default_values_item_38;
  @ffi.Uint8()
  int _unique_default_values_item_39;
  @ffi.Uint8()
  int _unique_default_values_item_40;
  @ffi.Uint8()
  int _unique_default_values_item_41;
  @ffi.Uint8()
  int _unique_default_values_item_42;
  @ffi.Uint8()
  int _unique_default_values_item_43;
  @ffi.Uint8()
  int _unique_default_values_item_44;
  @ffi.Uint8()
  int _unique_default_values_item_45;
  @ffi.Uint8()
  int _unique_default_values_item_46;
  @ffi.Uint8()
  int _unique_default_values_item_47;
  @ffi.Uint8()
  int _unique_default_values_item_48;
  @ffi.Uint8()
  int _unique_default_values_item_49;
  @ffi.Uint8()
  int _unique_default_values_item_50;
  @ffi.Uint8()
  int _unique_default_values_item_51;
  @ffi.Uint8()
  int _unique_default_values_item_52;
  @ffi.Uint8()
  int _unique_default_values_item_53;
  @ffi.Uint8()
  int _unique_default_values_item_54;
  @ffi.Uint8()
  int _unique_default_values_item_55;
  @ffi.Uint8()
  int _unique_default_values_item_56;
  @ffi.Uint8()
  int _unique_default_values_item_57;
  @ffi.Uint8()
  int _unique_default_values_item_58;
  @ffi.Uint8()
  int _unique_default_values_item_59;
  @ffi.Uint8()
  int _unique_default_values_item_60;
  @ffi.Uint8()
  int _unique_default_values_item_61;
  @ffi.Uint8()
  int _unique_default_values_item_62;
  @ffi.Uint8()
  int _unique_default_values_item_63;

  /// Helper for array `default_values`.
  ArrayHelper_gpiohandle_request_default_values_level0 get default_values =>
      ArrayHelper_gpiohandle_request_default_values_level0(this, [64], 0, 0);
  @ffi.Int8()
  int _unique_consumer_label_item_0;
  @ffi.Int8()
  int _unique_consumer_label_item_1;
  @ffi.Int8()
  int _unique_consumer_label_item_2;
  @ffi.Int8()
  int _unique_consumer_label_item_3;
  @ffi.Int8()
  int _unique_consumer_label_item_4;
  @ffi.Int8()
  int _unique_consumer_label_item_5;
  @ffi.Int8()
  int _unique_consumer_label_item_6;
  @ffi.Int8()
  int _unique_consumer_label_item_7;
  @ffi.Int8()
  int _unique_consumer_label_item_8;
  @ffi.Int8()
  int _unique_consumer_label_item_9;
  @ffi.Int8()
  int _unique_consumer_label_item_10;
  @ffi.Int8()
  int _unique_consumer_label_item_11;
  @ffi.Int8()
  int _unique_consumer_label_item_12;
  @ffi.Int8()
  int _unique_consumer_label_item_13;
  @ffi.Int8()
  int _unique_consumer_label_item_14;
  @ffi.Int8()
  int _unique_consumer_label_item_15;
  @ffi.Int8()
  int _unique_consumer_label_item_16;
  @ffi.Int8()
  int _unique_consumer_label_item_17;
  @ffi.Int8()
  int _unique_consumer_label_item_18;
  @ffi.Int8()
  int _unique_consumer_label_item_19;
  @ffi.Int8()
  int _unique_consumer_label_item_20;
  @ffi.Int8()
  int _unique_consumer_label_item_21;
  @ffi.Int8()
  int _unique_consumer_label_item_22;
  @ffi.Int8()
  int _unique_consumer_label_item_23;
  @ffi.Int8()
  int _unique_consumer_label_item_24;
  @ffi.Int8()
  int _unique_consumer_label_item_25;
  @ffi.Int8()
  int _unique_consumer_label_item_26;
  @ffi.Int8()
  int _unique_consumer_label_item_27;
  @ffi.Int8()
  int _unique_consumer_label_item_28;
  @ffi.Int8()
  int _unique_consumer_label_item_29;
  @ffi.Int8()
  int _unique_consumer_label_item_30;
  @ffi.Int8()
  int _unique_consumer_label_item_31;

  /// Helper for array `consumer_label`.
  ArrayHelper_gpiohandle_request_consumer_label_level0 get consumer_label =>
      ArrayHelper_gpiohandle_request_consumer_label_level0(this, [32], 0, 0);
  @ffi.Uint32()
  int lines;

  @ffi.Int32()
  int fd;
}

/// Helper for array `lineoffsets` in struct `gpiohandle_request`.
class ArrayHelper_gpiohandle_request_lineoffsets_level0 {
  final gpiohandle_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_request_lineoffsets_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_lineoffsets_item_0;
      case 1:
        return _struct._unique_lineoffsets_item_1;
      case 2:
        return _struct._unique_lineoffsets_item_2;
      case 3:
        return _struct._unique_lineoffsets_item_3;
      case 4:
        return _struct._unique_lineoffsets_item_4;
      case 5:
        return _struct._unique_lineoffsets_item_5;
      case 6:
        return _struct._unique_lineoffsets_item_6;
      case 7:
        return _struct._unique_lineoffsets_item_7;
      case 8:
        return _struct._unique_lineoffsets_item_8;
      case 9:
        return _struct._unique_lineoffsets_item_9;
      case 10:
        return _struct._unique_lineoffsets_item_10;
      case 11:
        return _struct._unique_lineoffsets_item_11;
      case 12:
        return _struct._unique_lineoffsets_item_12;
      case 13:
        return _struct._unique_lineoffsets_item_13;
      case 14:
        return _struct._unique_lineoffsets_item_14;
      case 15:
        return _struct._unique_lineoffsets_item_15;
      case 16:
        return _struct._unique_lineoffsets_item_16;
      case 17:
        return _struct._unique_lineoffsets_item_17;
      case 18:
        return _struct._unique_lineoffsets_item_18;
      case 19:
        return _struct._unique_lineoffsets_item_19;
      case 20:
        return _struct._unique_lineoffsets_item_20;
      case 21:
        return _struct._unique_lineoffsets_item_21;
      case 22:
        return _struct._unique_lineoffsets_item_22;
      case 23:
        return _struct._unique_lineoffsets_item_23;
      case 24:
        return _struct._unique_lineoffsets_item_24;
      case 25:
        return _struct._unique_lineoffsets_item_25;
      case 26:
        return _struct._unique_lineoffsets_item_26;
      case 27:
        return _struct._unique_lineoffsets_item_27;
      case 28:
        return _struct._unique_lineoffsets_item_28;
      case 29:
        return _struct._unique_lineoffsets_item_29;
      case 30:
        return _struct._unique_lineoffsets_item_30;
      case 31:
        return _struct._unique_lineoffsets_item_31;
      case 32:
        return _struct._unique_lineoffsets_item_32;
      case 33:
        return _struct._unique_lineoffsets_item_33;
      case 34:
        return _struct._unique_lineoffsets_item_34;
      case 35:
        return _struct._unique_lineoffsets_item_35;
      case 36:
        return _struct._unique_lineoffsets_item_36;
      case 37:
        return _struct._unique_lineoffsets_item_37;
      case 38:
        return _struct._unique_lineoffsets_item_38;
      case 39:
        return _struct._unique_lineoffsets_item_39;
      case 40:
        return _struct._unique_lineoffsets_item_40;
      case 41:
        return _struct._unique_lineoffsets_item_41;
      case 42:
        return _struct._unique_lineoffsets_item_42;
      case 43:
        return _struct._unique_lineoffsets_item_43;
      case 44:
        return _struct._unique_lineoffsets_item_44;
      case 45:
        return _struct._unique_lineoffsets_item_45;
      case 46:
        return _struct._unique_lineoffsets_item_46;
      case 47:
        return _struct._unique_lineoffsets_item_47;
      case 48:
        return _struct._unique_lineoffsets_item_48;
      case 49:
        return _struct._unique_lineoffsets_item_49;
      case 50:
        return _struct._unique_lineoffsets_item_50;
      case 51:
        return _struct._unique_lineoffsets_item_51;
      case 52:
        return _struct._unique_lineoffsets_item_52;
      case 53:
        return _struct._unique_lineoffsets_item_53;
      case 54:
        return _struct._unique_lineoffsets_item_54;
      case 55:
        return _struct._unique_lineoffsets_item_55;
      case 56:
        return _struct._unique_lineoffsets_item_56;
      case 57:
        return _struct._unique_lineoffsets_item_57;
      case 58:
        return _struct._unique_lineoffsets_item_58;
      case 59:
        return _struct._unique_lineoffsets_item_59;
      case 60:
        return _struct._unique_lineoffsets_item_60;
      case 61:
        return _struct._unique_lineoffsets_item_61;
      case 62:
        return _struct._unique_lineoffsets_item_62;
      case 63:
        return _struct._unique_lineoffsets_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_lineoffsets_item_0 = value;
        break;
      case 1:
        _struct._unique_lineoffsets_item_1 = value;
        break;
      case 2:
        _struct._unique_lineoffsets_item_2 = value;
        break;
      case 3:
        _struct._unique_lineoffsets_item_3 = value;
        break;
      case 4:
        _struct._unique_lineoffsets_item_4 = value;
        break;
      case 5:
        _struct._unique_lineoffsets_item_5 = value;
        break;
      case 6:
        _struct._unique_lineoffsets_item_6 = value;
        break;
      case 7:
        _struct._unique_lineoffsets_item_7 = value;
        break;
      case 8:
        _struct._unique_lineoffsets_item_8 = value;
        break;
      case 9:
        _struct._unique_lineoffsets_item_9 = value;
        break;
      case 10:
        _struct._unique_lineoffsets_item_10 = value;
        break;
      case 11:
        _struct._unique_lineoffsets_item_11 = value;
        break;
      case 12:
        _struct._unique_lineoffsets_item_12 = value;
        break;
      case 13:
        _struct._unique_lineoffsets_item_13 = value;
        break;
      case 14:
        _struct._unique_lineoffsets_item_14 = value;
        break;
      case 15:
        _struct._unique_lineoffsets_item_15 = value;
        break;
      case 16:
        _struct._unique_lineoffsets_item_16 = value;
        break;
      case 17:
        _struct._unique_lineoffsets_item_17 = value;
        break;
      case 18:
        _struct._unique_lineoffsets_item_18 = value;
        break;
      case 19:
        _struct._unique_lineoffsets_item_19 = value;
        break;
      case 20:
        _struct._unique_lineoffsets_item_20 = value;
        break;
      case 21:
        _struct._unique_lineoffsets_item_21 = value;
        break;
      case 22:
        _struct._unique_lineoffsets_item_22 = value;
        break;
      case 23:
        _struct._unique_lineoffsets_item_23 = value;
        break;
      case 24:
        _struct._unique_lineoffsets_item_24 = value;
        break;
      case 25:
        _struct._unique_lineoffsets_item_25 = value;
        break;
      case 26:
        _struct._unique_lineoffsets_item_26 = value;
        break;
      case 27:
        _struct._unique_lineoffsets_item_27 = value;
        break;
      case 28:
        _struct._unique_lineoffsets_item_28 = value;
        break;
      case 29:
        _struct._unique_lineoffsets_item_29 = value;
        break;
      case 30:
        _struct._unique_lineoffsets_item_30 = value;
        break;
      case 31:
        _struct._unique_lineoffsets_item_31 = value;
        break;
      case 32:
        _struct._unique_lineoffsets_item_32 = value;
        break;
      case 33:
        _struct._unique_lineoffsets_item_33 = value;
        break;
      case 34:
        _struct._unique_lineoffsets_item_34 = value;
        break;
      case 35:
        _struct._unique_lineoffsets_item_35 = value;
        break;
      case 36:
        _struct._unique_lineoffsets_item_36 = value;
        break;
      case 37:
        _struct._unique_lineoffsets_item_37 = value;
        break;
      case 38:
        _struct._unique_lineoffsets_item_38 = value;
        break;
      case 39:
        _struct._unique_lineoffsets_item_39 = value;
        break;
      case 40:
        _struct._unique_lineoffsets_item_40 = value;
        break;
      case 41:
        _struct._unique_lineoffsets_item_41 = value;
        break;
      case 42:
        _struct._unique_lineoffsets_item_42 = value;
        break;
      case 43:
        _struct._unique_lineoffsets_item_43 = value;
        break;
      case 44:
        _struct._unique_lineoffsets_item_44 = value;
        break;
      case 45:
        _struct._unique_lineoffsets_item_45 = value;
        break;
      case 46:
        _struct._unique_lineoffsets_item_46 = value;
        break;
      case 47:
        _struct._unique_lineoffsets_item_47 = value;
        break;
      case 48:
        _struct._unique_lineoffsets_item_48 = value;
        break;
      case 49:
        _struct._unique_lineoffsets_item_49 = value;
        break;
      case 50:
        _struct._unique_lineoffsets_item_50 = value;
        break;
      case 51:
        _struct._unique_lineoffsets_item_51 = value;
        break;
      case 52:
        _struct._unique_lineoffsets_item_52 = value;
        break;
      case 53:
        _struct._unique_lineoffsets_item_53 = value;
        break;
      case 54:
        _struct._unique_lineoffsets_item_54 = value;
        break;
      case 55:
        _struct._unique_lineoffsets_item_55 = value;
        break;
      case 56:
        _struct._unique_lineoffsets_item_56 = value;
        break;
      case 57:
        _struct._unique_lineoffsets_item_57 = value;
        break;
      case 58:
        _struct._unique_lineoffsets_item_58 = value;
        break;
      case 59:
        _struct._unique_lineoffsets_item_59 = value;
        break;
      case 60:
        _struct._unique_lineoffsets_item_60 = value;
        break;
      case 61:
        _struct._unique_lineoffsets_item_61 = value;
        break;
      case 62:
        _struct._unique_lineoffsets_item_62 = value;
        break;
      case 63:
        _struct._unique_lineoffsets_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `default_values` in struct `gpiohandle_request`.
class ArrayHelper_gpiohandle_request_default_values_level0 {
  final gpiohandle_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_request_default_values_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_default_values_item_0;
      case 1:
        return _struct._unique_default_values_item_1;
      case 2:
        return _struct._unique_default_values_item_2;
      case 3:
        return _struct._unique_default_values_item_3;
      case 4:
        return _struct._unique_default_values_item_4;
      case 5:
        return _struct._unique_default_values_item_5;
      case 6:
        return _struct._unique_default_values_item_6;
      case 7:
        return _struct._unique_default_values_item_7;
      case 8:
        return _struct._unique_default_values_item_8;
      case 9:
        return _struct._unique_default_values_item_9;
      case 10:
        return _struct._unique_default_values_item_10;
      case 11:
        return _struct._unique_default_values_item_11;
      case 12:
        return _struct._unique_default_values_item_12;
      case 13:
        return _struct._unique_default_values_item_13;
      case 14:
        return _struct._unique_default_values_item_14;
      case 15:
        return _struct._unique_default_values_item_15;
      case 16:
        return _struct._unique_default_values_item_16;
      case 17:
        return _struct._unique_default_values_item_17;
      case 18:
        return _struct._unique_default_values_item_18;
      case 19:
        return _struct._unique_default_values_item_19;
      case 20:
        return _struct._unique_default_values_item_20;
      case 21:
        return _struct._unique_default_values_item_21;
      case 22:
        return _struct._unique_default_values_item_22;
      case 23:
        return _struct._unique_default_values_item_23;
      case 24:
        return _struct._unique_default_values_item_24;
      case 25:
        return _struct._unique_default_values_item_25;
      case 26:
        return _struct._unique_default_values_item_26;
      case 27:
        return _struct._unique_default_values_item_27;
      case 28:
        return _struct._unique_default_values_item_28;
      case 29:
        return _struct._unique_default_values_item_29;
      case 30:
        return _struct._unique_default_values_item_30;
      case 31:
        return _struct._unique_default_values_item_31;
      case 32:
        return _struct._unique_default_values_item_32;
      case 33:
        return _struct._unique_default_values_item_33;
      case 34:
        return _struct._unique_default_values_item_34;
      case 35:
        return _struct._unique_default_values_item_35;
      case 36:
        return _struct._unique_default_values_item_36;
      case 37:
        return _struct._unique_default_values_item_37;
      case 38:
        return _struct._unique_default_values_item_38;
      case 39:
        return _struct._unique_default_values_item_39;
      case 40:
        return _struct._unique_default_values_item_40;
      case 41:
        return _struct._unique_default_values_item_41;
      case 42:
        return _struct._unique_default_values_item_42;
      case 43:
        return _struct._unique_default_values_item_43;
      case 44:
        return _struct._unique_default_values_item_44;
      case 45:
        return _struct._unique_default_values_item_45;
      case 46:
        return _struct._unique_default_values_item_46;
      case 47:
        return _struct._unique_default_values_item_47;
      case 48:
        return _struct._unique_default_values_item_48;
      case 49:
        return _struct._unique_default_values_item_49;
      case 50:
        return _struct._unique_default_values_item_50;
      case 51:
        return _struct._unique_default_values_item_51;
      case 52:
        return _struct._unique_default_values_item_52;
      case 53:
        return _struct._unique_default_values_item_53;
      case 54:
        return _struct._unique_default_values_item_54;
      case 55:
        return _struct._unique_default_values_item_55;
      case 56:
        return _struct._unique_default_values_item_56;
      case 57:
        return _struct._unique_default_values_item_57;
      case 58:
        return _struct._unique_default_values_item_58;
      case 59:
        return _struct._unique_default_values_item_59;
      case 60:
        return _struct._unique_default_values_item_60;
      case 61:
        return _struct._unique_default_values_item_61;
      case 62:
        return _struct._unique_default_values_item_62;
      case 63:
        return _struct._unique_default_values_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_default_values_item_0 = value;
        break;
      case 1:
        _struct._unique_default_values_item_1 = value;
        break;
      case 2:
        _struct._unique_default_values_item_2 = value;
        break;
      case 3:
        _struct._unique_default_values_item_3 = value;
        break;
      case 4:
        _struct._unique_default_values_item_4 = value;
        break;
      case 5:
        _struct._unique_default_values_item_5 = value;
        break;
      case 6:
        _struct._unique_default_values_item_6 = value;
        break;
      case 7:
        _struct._unique_default_values_item_7 = value;
        break;
      case 8:
        _struct._unique_default_values_item_8 = value;
        break;
      case 9:
        _struct._unique_default_values_item_9 = value;
        break;
      case 10:
        _struct._unique_default_values_item_10 = value;
        break;
      case 11:
        _struct._unique_default_values_item_11 = value;
        break;
      case 12:
        _struct._unique_default_values_item_12 = value;
        break;
      case 13:
        _struct._unique_default_values_item_13 = value;
        break;
      case 14:
        _struct._unique_default_values_item_14 = value;
        break;
      case 15:
        _struct._unique_default_values_item_15 = value;
        break;
      case 16:
        _struct._unique_default_values_item_16 = value;
        break;
      case 17:
        _struct._unique_default_values_item_17 = value;
        break;
      case 18:
        _struct._unique_default_values_item_18 = value;
        break;
      case 19:
        _struct._unique_default_values_item_19 = value;
        break;
      case 20:
        _struct._unique_default_values_item_20 = value;
        break;
      case 21:
        _struct._unique_default_values_item_21 = value;
        break;
      case 22:
        _struct._unique_default_values_item_22 = value;
        break;
      case 23:
        _struct._unique_default_values_item_23 = value;
        break;
      case 24:
        _struct._unique_default_values_item_24 = value;
        break;
      case 25:
        _struct._unique_default_values_item_25 = value;
        break;
      case 26:
        _struct._unique_default_values_item_26 = value;
        break;
      case 27:
        _struct._unique_default_values_item_27 = value;
        break;
      case 28:
        _struct._unique_default_values_item_28 = value;
        break;
      case 29:
        _struct._unique_default_values_item_29 = value;
        break;
      case 30:
        _struct._unique_default_values_item_30 = value;
        break;
      case 31:
        _struct._unique_default_values_item_31 = value;
        break;
      case 32:
        _struct._unique_default_values_item_32 = value;
        break;
      case 33:
        _struct._unique_default_values_item_33 = value;
        break;
      case 34:
        _struct._unique_default_values_item_34 = value;
        break;
      case 35:
        _struct._unique_default_values_item_35 = value;
        break;
      case 36:
        _struct._unique_default_values_item_36 = value;
        break;
      case 37:
        _struct._unique_default_values_item_37 = value;
        break;
      case 38:
        _struct._unique_default_values_item_38 = value;
        break;
      case 39:
        _struct._unique_default_values_item_39 = value;
        break;
      case 40:
        _struct._unique_default_values_item_40 = value;
        break;
      case 41:
        _struct._unique_default_values_item_41 = value;
        break;
      case 42:
        _struct._unique_default_values_item_42 = value;
        break;
      case 43:
        _struct._unique_default_values_item_43 = value;
        break;
      case 44:
        _struct._unique_default_values_item_44 = value;
        break;
      case 45:
        _struct._unique_default_values_item_45 = value;
        break;
      case 46:
        _struct._unique_default_values_item_46 = value;
        break;
      case 47:
        _struct._unique_default_values_item_47 = value;
        break;
      case 48:
        _struct._unique_default_values_item_48 = value;
        break;
      case 49:
        _struct._unique_default_values_item_49 = value;
        break;
      case 50:
        _struct._unique_default_values_item_50 = value;
        break;
      case 51:
        _struct._unique_default_values_item_51 = value;
        break;
      case 52:
        _struct._unique_default_values_item_52 = value;
        break;
      case 53:
        _struct._unique_default_values_item_53 = value;
        break;
      case 54:
        _struct._unique_default_values_item_54 = value;
        break;
      case 55:
        _struct._unique_default_values_item_55 = value;
        break;
      case 56:
        _struct._unique_default_values_item_56 = value;
        break;
      case 57:
        _struct._unique_default_values_item_57 = value;
        break;
      case 58:
        _struct._unique_default_values_item_58 = value;
        break;
      case 59:
        _struct._unique_default_values_item_59 = value;
        break;
      case 60:
        _struct._unique_default_values_item_60 = value;
        break;
      case 61:
        _struct._unique_default_values_item_61 = value;
        break;
      case 62:
        _struct._unique_default_values_item_62 = value;
        break;
      case 63:
        _struct._unique_default_values_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `consumer_label` in struct `gpiohandle_request`.
class ArrayHelper_gpiohandle_request_consumer_label_level0 {
  final gpiohandle_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_request_consumer_label_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_label_item_0;
      case 1:
        return _struct._unique_consumer_label_item_1;
      case 2:
        return _struct._unique_consumer_label_item_2;
      case 3:
        return _struct._unique_consumer_label_item_3;
      case 4:
        return _struct._unique_consumer_label_item_4;
      case 5:
        return _struct._unique_consumer_label_item_5;
      case 6:
        return _struct._unique_consumer_label_item_6;
      case 7:
        return _struct._unique_consumer_label_item_7;
      case 8:
        return _struct._unique_consumer_label_item_8;
      case 9:
        return _struct._unique_consumer_label_item_9;
      case 10:
        return _struct._unique_consumer_label_item_10;
      case 11:
        return _struct._unique_consumer_label_item_11;
      case 12:
        return _struct._unique_consumer_label_item_12;
      case 13:
        return _struct._unique_consumer_label_item_13;
      case 14:
        return _struct._unique_consumer_label_item_14;
      case 15:
        return _struct._unique_consumer_label_item_15;
      case 16:
        return _struct._unique_consumer_label_item_16;
      case 17:
        return _struct._unique_consumer_label_item_17;
      case 18:
        return _struct._unique_consumer_label_item_18;
      case 19:
        return _struct._unique_consumer_label_item_19;
      case 20:
        return _struct._unique_consumer_label_item_20;
      case 21:
        return _struct._unique_consumer_label_item_21;
      case 22:
        return _struct._unique_consumer_label_item_22;
      case 23:
        return _struct._unique_consumer_label_item_23;
      case 24:
        return _struct._unique_consumer_label_item_24;
      case 25:
        return _struct._unique_consumer_label_item_25;
      case 26:
        return _struct._unique_consumer_label_item_26;
      case 27:
        return _struct._unique_consumer_label_item_27;
      case 28:
        return _struct._unique_consumer_label_item_28;
      case 29:
        return _struct._unique_consumer_label_item_29;
      case 30:
        return _struct._unique_consumer_label_item_30;
      case 31:
        return _struct._unique_consumer_label_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_label_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_label_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_label_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_label_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_label_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_label_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_label_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_label_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_label_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_label_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_label_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_label_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_label_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_label_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_label_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_label_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_label_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_label_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_label_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_label_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_label_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_label_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_label_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_label_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_label_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_label_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_label_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_label_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_label_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_label_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_label_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_label_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiohandle_config - Configuration for a GPIO handle request
/// @flags: updated flags for the requested GPIO lines, such as
/// GPIOHANDLE_REQUEST_OUTPUT, GPIOHANDLE_REQUEST_ACTIVE_LOW etc, OR:ed
/// together
/// @default_values: if the GPIOHANDLE_REQUEST_OUTPUT is set in flags,
/// this specifies the default output value, should be 0 (low) or
/// 1 (high), anything else than 0 or 1 will be interpreted as 1 (high)
/// @padding: reserved for future use and should be zero filled
class gpiohandle_config extends ffi.Struct {
  @ffi.Uint32()
  int flags;

  @ffi.Uint8()
  int _unique_default_values_item_0;
  @ffi.Uint8()
  int _unique_default_values_item_1;
  @ffi.Uint8()
  int _unique_default_values_item_2;
  @ffi.Uint8()
  int _unique_default_values_item_3;
  @ffi.Uint8()
  int _unique_default_values_item_4;
  @ffi.Uint8()
  int _unique_default_values_item_5;
  @ffi.Uint8()
  int _unique_default_values_item_6;
  @ffi.Uint8()
  int _unique_default_values_item_7;
  @ffi.Uint8()
  int _unique_default_values_item_8;
  @ffi.Uint8()
  int _unique_default_values_item_9;
  @ffi.Uint8()
  int _unique_default_values_item_10;
  @ffi.Uint8()
  int _unique_default_values_item_11;
  @ffi.Uint8()
  int _unique_default_values_item_12;
  @ffi.Uint8()
  int _unique_default_values_item_13;
  @ffi.Uint8()
  int _unique_default_values_item_14;
  @ffi.Uint8()
  int _unique_default_values_item_15;
  @ffi.Uint8()
  int _unique_default_values_item_16;
  @ffi.Uint8()
  int _unique_default_values_item_17;
  @ffi.Uint8()
  int _unique_default_values_item_18;
  @ffi.Uint8()
  int _unique_default_values_item_19;
  @ffi.Uint8()
  int _unique_default_values_item_20;
  @ffi.Uint8()
  int _unique_default_values_item_21;
  @ffi.Uint8()
  int _unique_default_values_item_22;
  @ffi.Uint8()
  int _unique_default_values_item_23;
  @ffi.Uint8()
  int _unique_default_values_item_24;
  @ffi.Uint8()
  int _unique_default_values_item_25;
  @ffi.Uint8()
  int _unique_default_values_item_26;
  @ffi.Uint8()
  int _unique_default_values_item_27;
  @ffi.Uint8()
  int _unique_default_values_item_28;
  @ffi.Uint8()
  int _unique_default_values_item_29;
  @ffi.Uint8()
  int _unique_default_values_item_30;
  @ffi.Uint8()
  int _unique_default_values_item_31;
  @ffi.Uint8()
  int _unique_default_values_item_32;
  @ffi.Uint8()
  int _unique_default_values_item_33;
  @ffi.Uint8()
  int _unique_default_values_item_34;
  @ffi.Uint8()
  int _unique_default_values_item_35;
  @ffi.Uint8()
  int _unique_default_values_item_36;
  @ffi.Uint8()
  int _unique_default_values_item_37;
  @ffi.Uint8()
  int _unique_default_values_item_38;
  @ffi.Uint8()
  int _unique_default_values_item_39;
  @ffi.Uint8()
  int _unique_default_values_item_40;
  @ffi.Uint8()
  int _unique_default_values_item_41;
  @ffi.Uint8()
  int _unique_default_values_item_42;
  @ffi.Uint8()
  int _unique_default_values_item_43;
  @ffi.Uint8()
  int _unique_default_values_item_44;
  @ffi.Uint8()
  int _unique_default_values_item_45;
  @ffi.Uint8()
  int _unique_default_values_item_46;
  @ffi.Uint8()
  int _unique_default_values_item_47;
  @ffi.Uint8()
  int _unique_default_values_item_48;
  @ffi.Uint8()
  int _unique_default_values_item_49;
  @ffi.Uint8()
  int _unique_default_values_item_50;
  @ffi.Uint8()
  int _unique_default_values_item_51;
  @ffi.Uint8()
  int _unique_default_values_item_52;
  @ffi.Uint8()
  int _unique_default_values_item_53;
  @ffi.Uint8()
  int _unique_default_values_item_54;
  @ffi.Uint8()
  int _unique_default_values_item_55;
  @ffi.Uint8()
  int _unique_default_values_item_56;
  @ffi.Uint8()
  int _unique_default_values_item_57;
  @ffi.Uint8()
  int _unique_default_values_item_58;
  @ffi.Uint8()
  int _unique_default_values_item_59;
  @ffi.Uint8()
  int _unique_default_values_item_60;
  @ffi.Uint8()
  int _unique_default_values_item_61;
  @ffi.Uint8()
  int _unique_default_values_item_62;
  @ffi.Uint8()
  int _unique_default_values_item_63;

  /// Helper for array `default_values`.
  ArrayHelper_gpiohandle_config_default_values_level0 get default_values =>
      ArrayHelper_gpiohandle_config_default_values_level0(this, [64], 0, 0);
  @ffi.Uint32()
  int _unique_padding_item_0;
  @ffi.Uint32()
  int _unique_padding_item_1;
  @ffi.Uint32()
  int _unique_padding_item_2;
  @ffi.Uint32()
  int _unique_padding_item_3;

  /// Helper for array `padding`.
  ArrayHelper_gpiohandle_config_padding_level0 get padding =>
      ArrayHelper_gpiohandle_config_padding_level0(this, [4], 0, 0);
}

/// Helper for array `default_values` in struct `gpiohandle_config`.
class ArrayHelper_gpiohandle_config_default_values_level0 {
  final gpiohandle_config _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_config_default_values_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_default_values_item_0;
      case 1:
        return _struct._unique_default_values_item_1;
      case 2:
        return _struct._unique_default_values_item_2;
      case 3:
        return _struct._unique_default_values_item_3;
      case 4:
        return _struct._unique_default_values_item_4;
      case 5:
        return _struct._unique_default_values_item_5;
      case 6:
        return _struct._unique_default_values_item_6;
      case 7:
        return _struct._unique_default_values_item_7;
      case 8:
        return _struct._unique_default_values_item_8;
      case 9:
        return _struct._unique_default_values_item_9;
      case 10:
        return _struct._unique_default_values_item_10;
      case 11:
        return _struct._unique_default_values_item_11;
      case 12:
        return _struct._unique_default_values_item_12;
      case 13:
        return _struct._unique_default_values_item_13;
      case 14:
        return _struct._unique_default_values_item_14;
      case 15:
        return _struct._unique_default_values_item_15;
      case 16:
        return _struct._unique_default_values_item_16;
      case 17:
        return _struct._unique_default_values_item_17;
      case 18:
        return _struct._unique_default_values_item_18;
      case 19:
        return _struct._unique_default_values_item_19;
      case 20:
        return _struct._unique_default_values_item_20;
      case 21:
        return _struct._unique_default_values_item_21;
      case 22:
        return _struct._unique_default_values_item_22;
      case 23:
        return _struct._unique_default_values_item_23;
      case 24:
        return _struct._unique_default_values_item_24;
      case 25:
        return _struct._unique_default_values_item_25;
      case 26:
        return _struct._unique_default_values_item_26;
      case 27:
        return _struct._unique_default_values_item_27;
      case 28:
        return _struct._unique_default_values_item_28;
      case 29:
        return _struct._unique_default_values_item_29;
      case 30:
        return _struct._unique_default_values_item_30;
      case 31:
        return _struct._unique_default_values_item_31;
      case 32:
        return _struct._unique_default_values_item_32;
      case 33:
        return _struct._unique_default_values_item_33;
      case 34:
        return _struct._unique_default_values_item_34;
      case 35:
        return _struct._unique_default_values_item_35;
      case 36:
        return _struct._unique_default_values_item_36;
      case 37:
        return _struct._unique_default_values_item_37;
      case 38:
        return _struct._unique_default_values_item_38;
      case 39:
        return _struct._unique_default_values_item_39;
      case 40:
        return _struct._unique_default_values_item_40;
      case 41:
        return _struct._unique_default_values_item_41;
      case 42:
        return _struct._unique_default_values_item_42;
      case 43:
        return _struct._unique_default_values_item_43;
      case 44:
        return _struct._unique_default_values_item_44;
      case 45:
        return _struct._unique_default_values_item_45;
      case 46:
        return _struct._unique_default_values_item_46;
      case 47:
        return _struct._unique_default_values_item_47;
      case 48:
        return _struct._unique_default_values_item_48;
      case 49:
        return _struct._unique_default_values_item_49;
      case 50:
        return _struct._unique_default_values_item_50;
      case 51:
        return _struct._unique_default_values_item_51;
      case 52:
        return _struct._unique_default_values_item_52;
      case 53:
        return _struct._unique_default_values_item_53;
      case 54:
        return _struct._unique_default_values_item_54;
      case 55:
        return _struct._unique_default_values_item_55;
      case 56:
        return _struct._unique_default_values_item_56;
      case 57:
        return _struct._unique_default_values_item_57;
      case 58:
        return _struct._unique_default_values_item_58;
      case 59:
        return _struct._unique_default_values_item_59;
      case 60:
        return _struct._unique_default_values_item_60;
      case 61:
        return _struct._unique_default_values_item_61;
      case 62:
        return _struct._unique_default_values_item_62;
      case 63:
        return _struct._unique_default_values_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_default_values_item_0 = value;
        break;
      case 1:
        _struct._unique_default_values_item_1 = value;
        break;
      case 2:
        _struct._unique_default_values_item_2 = value;
        break;
      case 3:
        _struct._unique_default_values_item_3 = value;
        break;
      case 4:
        _struct._unique_default_values_item_4 = value;
        break;
      case 5:
        _struct._unique_default_values_item_5 = value;
        break;
      case 6:
        _struct._unique_default_values_item_6 = value;
        break;
      case 7:
        _struct._unique_default_values_item_7 = value;
        break;
      case 8:
        _struct._unique_default_values_item_8 = value;
        break;
      case 9:
        _struct._unique_default_values_item_9 = value;
        break;
      case 10:
        _struct._unique_default_values_item_10 = value;
        break;
      case 11:
        _struct._unique_default_values_item_11 = value;
        break;
      case 12:
        _struct._unique_default_values_item_12 = value;
        break;
      case 13:
        _struct._unique_default_values_item_13 = value;
        break;
      case 14:
        _struct._unique_default_values_item_14 = value;
        break;
      case 15:
        _struct._unique_default_values_item_15 = value;
        break;
      case 16:
        _struct._unique_default_values_item_16 = value;
        break;
      case 17:
        _struct._unique_default_values_item_17 = value;
        break;
      case 18:
        _struct._unique_default_values_item_18 = value;
        break;
      case 19:
        _struct._unique_default_values_item_19 = value;
        break;
      case 20:
        _struct._unique_default_values_item_20 = value;
        break;
      case 21:
        _struct._unique_default_values_item_21 = value;
        break;
      case 22:
        _struct._unique_default_values_item_22 = value;
        break;
      case 23:
        _struct._unique_default_values_item_23 = value;
        break;
      case 24:
        _struct._unique_default_values_item_24 = value;
        break;
      case 25:
        _struct._unique_default_values_item_25 = value;
        break;
      case 26:
        _struct._unique_default_values_item_26 = value;
        break;
      case 27:
        _struct._unique_default_values_item_27 = value;
        break;
      case 28:
        _struct._unique_default_values_item_28 = value;
        break;
      case 29:
        _struct._unique_default_values_item_29 = value;
        break;
      case 30:
        _struct._unique_default_values_item_30 = value;
        break;
      case 31:
        _struct._unique_default_values_item_31 = value;
        break;
      case 32:
        _struct._unique_default_values_item_32 = value;
        break;
      case 33:
        _struct._unique_default_values_item_33 = value;
        break;
      case 34:
        _struct._unique_default_values_item_34 = value;
        break;
      case 35:
        _struct._unique_default_values_item_35 = value;
        break;
      case 36:
        _struct._unique_default_values_item_36 = value;
        break;
      case 37:
        _struct._unique_default_values_item_37 = value;
        break;
      case 38:
        _struct._unique_default_values_item_38 = value;
        break;
      case 39:
        _struct._unique_default_values_item_39 = value;
        break;
      case 40:
        _struct._unique_default_values_item_40 = value;
        break;
      case 41:
        _struct._unique_default_values_item_41 = value;
        break;
      case 42:
        _struct._unique_default_values_item_42 = value;
        break;
      case 43:
        _struct._unique_default_values_item_43 = value;
        break;
      case 44:
        _struct._unique_default_values_item_44 = value;
        break;
      case 45:
        _struct._unique_default_values_item_45 = value;
        break;
      case 46:
        _struct._unique_default_values_item_46 = value;
        break;
      case 47:
        _struct._unique_default_values_item_47 = value;
        break;
      case 48:
        _struct._unique_default_values_item_48 = value;
        break;
      case 49:
        _struct._unique_default_values_item_49 = value;
        break;
      case 50:
        _struct._unique_default_values_item_50 = value;
        break;
      case 51:
        _struct._unique_default_values_item_51 = value;
        break;
      case 52:
        _struct._unique_default_values_item_52 = value;
        break;
      case 53:
        _struct._unique_default_values_item_53 = value;
        break;
      case 54:
        _struct._unique_default_values_item_54 = value;
        break;
      case 55:
        _struct._unique_default_values_item_55 = value;
        break;
      case 56:
        _struct._unique_default_values_item_56 = value;
        break;
      case 57:
        _struct._unique_default_values_item_57 = value;
        break;
      case 58:
        _struct._unique_default_values_item_58 = value;
        break;
      case 59:
        _struct._unique_default_values_item_59 = value;
        break;
      case 60:
        _struct._unique_default_values_item_60 = value;
        break;
      case 61:
        _struct._unique_default_values_item_61 = value;
        break;
      case 62:
        _struct._unique_default_values_item_62 = value;
        break;
      case 63:
        _struct._unique_default_values_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// Helper for array `padding` in struct `gpiohandle_config`.
class ArrayHelper_gpiohandle_config_padding_level0 {
  final gpiohandle_config _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_config_padding_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_padding_item_0;
      case 1:
        return _struct._unique_padding_item_1;
      case 2:
        return _struct._unique_padding_item_2;
      case 3:
        return _struct._unique_padding_item_3;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_padding_item_0 = value;
        break;
      case 1:
        _struct._unique_padding_item_1 = value;
        break;
      case 2:
        _struct._unique_padding_item_2 = value;
        break;
      case 3:
        _struct._unique_padding_item_3 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpiohandle_data - Information of values on a GPIO handle
/// @values: when getting the state of lines this contains the current
/// state of a line, when setting the state of lines these should contain
/// the desired target state
class gpiohandle_data extends ffi.Struct {
  @ffi.Uint8()
  int _unique_values_item_0;
  @ffi.Uint8()
  int _unique_values_item_1;
  @ffi.Uint8()
  int _unique_values_item_2;
  @ffi.Uint8()
  int _unique_values_item_3;
  @ffi.Uint8()
  int _unique_values_item_4;
  @ffi.Uint8()
  int _unique_values_item_5;
  @ffi.Uint8()
  int _unique_values_item_6;
  @ffi.Uint8()
  int _unique_values_item_7;
  @ffi.Uint8()
  int _unique_values_item_8;
  @ffi.Uint8()
  int _unique_values_item_9;
  @ffi.Uint8()
  int _unique_values_item_10;
  @ffi.Uint8()
  int _unique_values_item_11;
  @ffi.Uint8()
  int _unique_values_item_12;
  @ffi.Uint8()
  int _unique_values_item_13;
  @ffi.Uint8()
  int _unique_values_item_14;
  @ffi.Uint8()
  int _unique_values_item_15;
  @ffi.Uint8()
  int _unique_values_item_16;
  @ffi.Uint8()
  int _unique_values_item_17;
  @ffi.Uint8()
  int _unique_values_item_18;
  @ffi.Uint8()
  int _unique_values_item_19;
  @ffi.Uint8()
  int _unique_values_item_20;
  @ffi.Uint8()
  int _unique_values_item_21;
  @ffi.Uint8()
  int _unique_values_item_22;
  @ffi.Uint8()
  int _unique_values_item_23;
  @ffi.Uint8()
  int _unique_values_item_24;
  @ffi.Uint8()
  int _unique_values_item_25;
  @ffi.Uint8()
  int _unique_values_item_26;
  @ffi.Uint8()
  int _unique_values_item_27;
  @ffi.Uint8()
  int _unique_values_item_28;
  @ffi.Uint8()
  int _unique_values_item_29;
  @ffi.Uint8()
  int _unique_values_item_30;
  @ffi.Uint8()
  int _unique_values_item_31;
  @ffi.Uint8()
  int _unique_values_item_32;
  @ffi.Uint8()
  int _unique_values_item_33;
  @ffi.Uint8()
  int _unique_values_item_34;
  @ffi.Uint8()
  int _unique_values_item_35;
  @ffi.Uint8()
  int _unique_values_item_36;
  @ffi.Uint8()
  int _unique_values_item_37;
  @ffi.Uint8()
  int _unique_values_item_38;
  @ffi.Uint8()
  int _unique_values_item_39;
  @ffi.Uint8()
  int _unique_values_item_40;
  @ffi.Uint8()
  int _unique_values_item_41;
  @ffi.Uint8()
  int _unique_values_item_42;
  @ffi.Uint8()
  int _unique_values_item_43;
  @ffi.Uint8()
  int _unique_values_item_44;
  @ffi.Uint8()
  int _unique_values_item_45;
  @ffi.Uint8()
  int _unique_values_item_46;
  @ffi.Uint8()
  int _unique_values_item_47;
  @ffi.Uint8()
  int _unique_values_item_48;
  @ffi.Uint8()
  int _unique_values_item_49;
  @ffi.Uint8()
  int _unique_values_item_50;
  @ffi.Uint8()
  int _unique_values_item_51;
  @ffi.Uint8()
  int _unique_values_item_52;
  @ffi.Uint8()
  int _unique_values_item_53;
  @ffi.Uint8()
  int _unique_values_item_54;
  @ffi.Uint8()
  int _unique_values_item_55;
  @ffi.Uint8()
  int _unique_values_item_56;
  @ffi.Uint8()
  int _unique_values_item_57;
  @ffi.Uint8()
  int _unique_values_item_58;
  @ffi.Uint8()
  int _unique_values_item_59;
  @ffi.Uint8()
  int _unique_values_item_60;
  @ffi.Uint8()
  int _unique_values_item_61;
  @ffi.Uint8()
  int _unique_values_item_62;
  @ffi.Uint8()
  int _unique_values_item_63;

  /// Helper for array `values`.
  ArrayHelper_gpiohandle_data_values_level0 get values =>
      ArrayHelper_gpiohandle_data_values_level0(this, [64], 0, 0);
}

/// Helper for array `values` in struct `gpiohandle_data`.
class ArrayHelper_gpiohandle_data_values_level0 {
  final gpiohandle_data _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpiohandle_data_values_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_values_item_0;
      case 1:
        return _struct._unique_values_item_1;
      case 2:
        return _struct._unique_values_item_2;
      case 3:
        return _struct._unique_values_item_3;
      case 4:
        return _struct._unique_values_item_4;
      case 5:
        return _struct._unique_values_item_5;
      case 6:
        return _struct._unique_values_item_6;
      case 7:
        return _struct._unique_values_item_7;
      case 8:
        return _struct._unique_values_item_8;
      case 9:
        return _struct._unique_values_item_9;
      case 10:
        return _struct._unique_values_item_10;
      case 11:
        return _struct._unique_values_item_11;
      case 12:
        return _struct._unique_values_item_12;
      case 13:
        return _struct._unique_values_item_13;
      case 14:
        return _struct._unique_values_item_14;
      case 15:
        return _struct._unique_values_item_15;
      case 16:
        return _struct._unique_values_item_16;
      case 17:
        return _struct._unique_values_item_17;
      case 18:
        return _struct._unique_values_item_18;
      case 19:
        return _struct._unique_values_item_19;
      case 20:
        return _struct._unique_values_item_20;
      case 21:
        return _struct._unique_values_item_21;
      case 22:
        return _struct._unique_values_item_22;
      case 23:
        return _struct._unique_values_item_23;
      case 24:
        return _struct._unique_values_item_24;
      case 25:
        return _struct._unique_values_item_25;
      case 26:
        return _struct._unique_values_item_26;
      case 27:
        return _struct._unique_values_item_27;
      case 28:
        return _struct._unique_values_item_28;
      case 29:
        return _struct._unique_values_item_29;
      case 30:
        return _struct._unique_values_item_30;
      case 31:
        return _struct._unique_values_item_31;
      case 32:
        return _struct._unique_values_item_32;
      case 33:
        return _struct._unique_values_item_33;
      case 34:
        return _struct._unique_values_item_34;
      case 35:
        return _struct._unique_values_item_35;
      case 36:
        return _struct._unique_values_item_36;
      case 37:
        return _struct._unique_values_item_37;
      case 38:
        return _struct._unique_values_item_38;
      case 39:
        return _struct._unique_values_item_39;
      case 40:
        return _struct._unique_values_item_40;
      case 41:
        return _struct._unique_values_item_41;
      case 42:
        return _struct._unique_values_item_42;
      case 43:
        return _struct._unique_values_item_43;
      case 44:
        return _struct._unique_values_item_44;
      case 45:
        return _struct._unique_values_item_45;
      case 46:
        return _struct._unique_values_item_46;
      case 47:
        return _struct._unique_values_item_47;
      case 48:
        return _struct._unique_values_item_48;
      case 49:
        return _struct._unique_values_item_49;
      case 50:
        return _struct._unique_values_item_50;
      case 51:
        return _struct._unique_values_item_51;
      case 52:
        return _struct._unique_values_item_52;
      case 53:
        return _struct._unique_values_item_53;
      case 54:
        return _struct._unique_values_item_54;
      case 55:
        return _struct._unique_values_item_55;
      case 56:
        return _struct._unique_values_item_56;
      case 57:
        return _struct._unique_values_item_57;
      case 58:
        return _struct._unique_values_item_58;
      case 59:
        return _struct._unique_values_item_59;
      case 60:
        return _struct._unique_values_item_60;
      case 61:
        return _struct._unique_values_item_61;
      case 62:
        return _struct._unique_values_item_62;
      case 63:
        return _struct._unique_values_item_63;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_values_item_0 = value;
        break;
      case 1:
        _struct._unique_values_item_1 = value;
        break;
      case 2:
        _struct._unique_values_item_2 = value;
        break;
      case 3:
        _struct._unique_values_item_3 = value;
        break;
      case 4:
        _struct._unique_values_item_4 = value;
        break;
      case 5:
        _struct._unique_values_item_5 = value;
        break;
      case 6:
        _struct._unique_values_item_6 = value;
        break;
      case 7:
        _struct._unique_values_item_7 = value;
        break;
      case 8:
        _struct._unique_values_item_8 = value;
        break;
      case 9:
        _struct._unique_values_item_9 = value;
        break;
      case 10:
        _struct._unique_values_item_10 = value;
        break;
      case 11:
        _struct._unique_values_item_11 = value;
        break;
      case 12:
        _struct._unique_values_item_12 = value;
        break;
      case 13:
        _struct._unique_values_item_13 = value;
        break;
      case 14:
        _struct._unique_values_item_14 = value;
        break;
      case 15:
        _struct._unique_values_item_15 = value;
        break;
      case 16:
        _struct._unique_values_item_16 = value;
        break;
      case 17:
        _struct._unique_values_item_17 = value;
        break;
      case 18:
        _struct._unique_values_item_18 = value;
        break;
      case 19:
        _struct._unique_values_item_19 = value;
        break;
      case 20:
        _struct._unique_values_item_20 = value;
        break;
      case 21:
        _struct._unique_values_item_21 = value;
        break;
      case 22:
        _struct._unique_values_item_22 = value;
        break;
      case 23:
        _struct._unique_values_item_23 = value;
        break;
      case 24:
        _struct._unique_values_item_24 = value;
        break;
      case 25:
        _struct._unique_values_item_25 = value;
        break;
      case 26:
        _struct._unique_values_item_26 = value;
        break;
      case 27:
        _struct._unique_values_item_27 = value;
        break;
      case 28:
        _struct._unique_values_item_28 = value;
        break;
      case 29:
        _struct._unique_values_item_29 = value;
        break;
      case 30:
        _struct._unique_values_item_30 = value;
        break;
      case 31:
        _struct._unique_values_item_31 = value;
        break;
      case 32:
        _struct._unique_values_item_32 = value;
        break;
      case 33:
        _struct._unique_values_item_33 = value;
        break;
      case 34:
        _struct._unique_values_item_34 = value;
        break;
      case 35:
        _struct._unique_values_item_35 = value;
        break;
      case 36:
        _struct._unique_values_item_36 = value;
        break;
      case 37:
        _struct._unique_values_item_37 = value;
        break;
      case 38:
        _struct._unique_values_item_38 = value;
        break;
      case 39:
        _struct._unique_values_item_39 = value;
        break;
      case 40:
        _struct._unique_values_item_40 = value;
        break;
      case 41:
        _struct._unique_values_item_41 = value;
        break;
      case 42:
        _struct._unique_values_item_42 = value;
        break;
      case 43:
        _struct._unique_values_item_43 = value;
        break;
      case 44:
        _struct._unique_values_item_44 = value;
        break;
      case 45:
        _struct._unique_values_item_45 = value;
        break;
      case 46:
        _struct._unique_values_item_46 = value;
        break;
      case 47:
        _struct._unique_values_item_47 = value;
        break;
      case 48:
        _struct._unique_values_item_48 = value;
        break;
      case 49:
        _struct._unique_values_item_49 = value;
        break;
      case 50:
        _struct._unique_values_item_50 = value;
        break;
      case 51:
        _struct._unique_values_item_51 = value;
        break;
      case 52:
        _struct._unique_values_item_52 = value;
        break;
      case 53:
        _struct._unique_values_item_53 = value;
        break;
      case 54:
        _struct._unique_values_item_54 = value;
        break;
      case 55:
        _struct._unique_values_item_55 = value;
        break;
      case 56:
        _struct._unique_values_item_56 = value;
        break;
      case 57:
        _struct._unique_values_item_57 = value;
        break;
      case 58:
        _struct._unique_values_item_58 = value;
        break;
      case 59:
        _struct._unique_values_item_59 = value;
        break;
      case 60:
        _struct._unique_values_item_60 = value;
        break;
      case 61:
        _struct._unique_values_item_61 = value;
        break;
      case 62:
        _struct._unique_values_item_62 = value;
        break;
      case 63:
        _struct._unique_values_item_63 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioevent_request - Information about a GPIO event request
/// @lineoffset: the desired line to subscribe to events from, specified by
/// offset index for the associated GPIO device
/// @handleflags: desired handle flags for the desired GPIO line, such as
/// GPIOHANDLE_REQUEST_ACTIVE_LOW or GPIOHANDLE_REQUEST_OPEN_DRAIN
/// @eventflags: desired flags for the desired GPIO event line, such as
/// GPIOEVENT_REQUEST_RISING_EDGE or GPIOEVENT_REQUEST_FALLING_EDGE
/// @consumer_label: a desired consumer label for the selected GPIO line(s)
/// such as "my-listener"
/// @fd: if successful this field will contain a valid anonymous file handle
/// after a GPIO_GET_LINEEVENT_IOCTL operation, zero or negative value
/// means error
class gpioevent_request extends ffi.Struct {
  @ffi.Uint32()
  int lineoffset;

  @ffi.Uint32()
  int handleflags;

  @ffi.Uint32()
  int eventflags;

  @ffi.Int8()
  int _unique_consumer_label_item_0;
  @ffi.Int8()
  int _unique_consumer_label_item_1;
  @ffi.Int8()
  int _unique_consumer_label_item_2;
  @ffi.Int8()
  int _unique_consumer_label_item_3;
  @ffi.Int8()
  int _unique_consumer_label_item_4;
  @ffi.Int8()
  int _unique_consumer_label_item_5;
  @ffi.Int8()
  int _unique_consumer_label_item_6;
  @ffi.Int8()
  int _unique_consumer_label_item_7;
  @ffi.Int8()
  int _unique_consumer_label_item_8;
  @ffi.Int8()
  int _unique_consumer_label_item_9;
  @ffi.Int8()
  int _unique_consumer_label_item_10;
  @ffi.Int8()
  int _unique_consumer_label_item_11;
  @ffi.Int8()
  int _unique_consumer_label_item_12;
  @ffi.Int8()
  int _unique_consumer_label_item_13;
  @ffi.Int8()
  int _unique_consumer_label_item_14;
  @ffi.Int8()
  int _unique_consumer_label_item_15;
  @ffi.Int8()
  int _unique_consumer_label_item_16;
  @ffi.Int8()
  int _unique_consumer_label_item_17;
  @ffi.Int8()
  int _unique_consumer_label_item_18;
  @ffi.Int8()
  int _unique_consumer_label_item_19;
  @ffi.Int8()
  int _unique_consumer_label_item_20;
  @ffi.Int8()
  int _unique_consumer_label_item_21;
  @ffi.Int8()
  int _unique_consumer_label_item_22;
  @ffi.Int8()
  int _unique_consumer_label_item_23;
  @ffi.Int8()
  int _unique_consumer_label_item_24;
  @ffi.Int8()
  int _unique_consumer_label_item_25;
  @ffi.Int8()
  int _unique_consumer_label_item_26;
  @ffi.Int8()
  int _unique_consumer_label_item_27;
  @ffi.Int8()
  int _unique_consumer_label_item_28;
  @ffi.Int8()
  int _unique_consumer_label_item_29;
  @ffi.Int8()
  int _unique_consumer_label_item_30;
  @ffi.Int8()
  int _unique_consumer_label_item_31;

  /// Helper for array `consumer_label`.
  ArrayHelper_gpioevent_request_consumer_label_level0 get consumer_label =>
      ArrayHelper_gpioevent_request_consumer_label_level0(this, [32], 0, 0);
  @ffi.Int32()
  int fd;
}

/// Helper for array `consumer_label` in struct `gpioevent_request`.
class ArrayHelper_gpioevent_request_consumer_label_level0 {
  final gpioevent_request _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_gpioevent_request_consumer_label_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_consumer_label_item_0;
      case 1:
        return _struct._unique_consumer_label_item_1;
      case 2:
        return _struct._unique_consumer_label_item_2;
      case 3:
        return _struct._unique_consumer_label_item_3;
      case 4:
        return _struct._unique_consumer_label_item_4;
      case 5:
        return _struct._unique_consumer_label_item_5;
      case 6:
        return _struct._unique_consumer_label_item_6;
      case 7:
        return _struct._unique_consumer_label_item_7;
      case 8:
        return _struct._unique_consumer_label_item_8;
      case 9:
        return _struct._unique_consumer_label_item_9;
      case 10:
        return _struct._unique_consumer_label_item_10;
      case 11:
        return _struct._unique_consumer_label_item_11;
      case 12:
        return _struct._unique_consumer_label_item_12;
      case 13:
        return _struct._unique_consumer_label_item_13;
      case 14:
        return _struct._unique_consumer_label_item_14;
      case 15:
        return _struct._unique_consumer_label_item_15;
      case 16:
        return _struct._unique_consumer_label_item_16;
      case 17:
        return _struct._unique_consumer_label_item_17;
      case 18:
        return _struct._unique_consumer_label_item_18;
      case 19:
        return _struct._unique_consumer_label_item_19;
      case 20:
        return _struct._unique_consumer_label_item_20;
      case 21:
        return _struct._unique_consumer_label_item_21;
      case 22:
        return _struct._unique_consumer_label_item_22;
      case 23:
        return _struct._unique_consumer_label_item_23;
      case 24:
        return _struct._unique_consumer_label_item_24;
      case 25:
        return _struct._unique_consumer_label_item_25;
      case 26:
        return _struct._unique_consumer_label_item_26;
      case 27:
        return _struct._unique_consumer_label_item_27;
      case 28:
        return _struct._unique_consumer_label_item_28;
      case 29:
        return _struct._unique_consumer_label_item_29;
      case 30:
        return _struct._unique_consumer_label_item_30;
      case 31:
        return _struct._unique_consumer_label_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_consumer_label_item_0 = value;
        break;
      case 1:
        _struct._unique_consumer_label_item_1 = value;
        break;
      case 2:
        _struct._unique_consumer_label_item_2 = value;
        break;
      case 3:
        _struct._unique_consumer_label_item_3 = value;
        break;
      case 4:
        _struct._unique_consumer_label_item_4 = value;
        break;
      case 5:
        _struct._unique_consumer_label_item_5 = value;
        break;
      case 6:
        _struct._unique_consumer_label_item_6 = value;
        break;
      case 7:
        _struct._unique_consumer_label_item_7 = value;
        break;
      case 8:
        _struct._unique_consumer_label_item_8 = value;
        break;
      case 9:
        _struct._unique_consumer_label_item_9 = value;
        break;
      case 10:
        _struct._unique_consumer_label_item_10 = value;
        break;
      case 11:
        _struct._unique_consumer_label_item_11 = value;
        break;
      case 12:
        _struct._unique_consumer_label_item_12 = value;
        break;
      case 13:
        _struct._unique_consumer_label_item_13 = value;
        break;
      case 14:
        _struct._unique_consumer_label_item_14 = value;
        break;
      case 15:
        _struct._unique_consumer_label_item_15 = value;
        break;
      case 16:
        _struct._unique_consumer_label_item_16 = value;
        break;
      case 17:
        _struct._unique_consumer_label_item_17 = value;
        break;
      case 18:
        _struct._unique_consumer_label_item_18 = value;
        break;
      case 19:
        _struct._unique_consumer_label_item_19 = value;
        break;
      case 20:
        _struct._unique_consumer_label_item_20 = value;
        break;
      case 21:
        _struct._unique_consumer_label_item_21 = value;
        break;
      case 22:
        _struct._unique_consumer_label_item_22 = value;
        break;
      case 23:
        _struct._unique_consumer_label_item_23 = value;
        break;
      case 24:
        _struct._unique_consumer_label_item_24 = value;
        break;
      case 25:
        _struct._unique_consumer_label_item_25 = value;
        break;
      case 26:
        _struct._unique_consumer_label_item_26 = value;
        break;
      case 27:
        _struct._unique_consumer_label_item_27 = value;
        break;
      case 28:
        _struct._unique_consumer_label_item_28 = value;
        break;
      case 29:
        _struct._unique_consumer_label_item_29 = value;
        break;
      case 30:
        _struct._unique_consumer_label_item_30 = value;
        break;
      case 31:
        _struct._unique_consumer_label_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// struct gpioevent_data - The actual event being pushed to userspace
/// @timestamp: best estimate of time of event occurrence, in nanoseconds
/// @id: event identifier
class gpioevent_data extends ffi.Struct {
  @ffi.Uint64()
  int timestamp;

  @ffi.Uint32()
  int id;
}

const int GPIOLINE_FLAG_KERNEL = 1;

const int GPIOLINE_FLAG_IS_OUT = 2;

const int GPIOLINE_FLAG_ACTIVE_LOW = 4;

const int GPIOLINE_FLAG_OPEN_DRAIN = 8;

const int GPIOLINE_FLAG_OPEN_SOURCE = 16;

const int GPIOLINE_FLAG_BIAS_PULL_UP = 32;

const int GPIOLINE_FLAG_BIAS_PULL_DOWN = 64;

const int GPIOLINE_FLAG_BIAS_DISABLE = 128;

const int GPIOHANDLES_MAX = 64;

const int GPIOHANDLE_REQUEST_INPUT = 1;

const int GPIOHANDLE_REQUEST_OUTPUT = 2;

const int GPIOHANDLE_REQUEST_ACTIVE_LOW = 4;

const int GPIOHANDLE_REQUEST_OPEN_DRAIN = 8;

const int GPIOHANDLE_REQUEST_OPEN_SOURCE = 16;

const int GPIOHANDLE_REQUEST_BIAS_PULL_UP = 32;

const int GPIOHANDLE_REQUEST_BIAS_PULL_DOWN = 64;

const int GPIOHANDLE_REQUEST_BIAS_DISABLE = 128;

const int GPIOHANDLE_SET_CONFIG_IOCTL = 3226776586;

const int GPIOHANDLE_GET_LINE_VALUES_IOCTL = 3225465864;

const int GPIOHANDLE_SET_LINE_VALUES_IOCTL = 3225465865;

const int GPIOEVENT_REQUEST_RISING_EDGE = 1;

const int GPIOEVENT_REQUEST_FALLING_EDGE = 2;

const int GPIOEVENT_REQUEST_BOTH_EDGES = 3;

const int GPIOEVENT_EVENT_RISING_EDGE = 1;

const int GPIOEVENT_EVENT_FALLING_EDGE = 2;

const int GPIO_GET_CHIPINFO_IOCTL = 2151986177;

const int GPIO_GET_LINEINFO_IOCTL = 3225990146;

const int GPIO_GET_LINEHANDLE_IOCTL = 3245126659;

const int GPIO_GET_LINEEVENT_IOCTL = 3224417284;
